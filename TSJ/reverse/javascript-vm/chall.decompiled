read_input();
while(swirl_counter < mem[31]){ // 32 loops
    swirl();
    add_or_smth();
    swirl_counter++;
}

iter = 0;
while(iter < flag_len){
    a = enc_flag[iter];
    b = input_flag[iter];

    if(enc_flag[iter] != input_flag[iter]){
        stdout_string("Wrong!\n"); // "Wrong!"
        exit();
    }

    iter++;
}

stdout_string("Correct!"); // "Correct!"
exit()


void read_input(){
    while(g_counter < g_flag_len){
        stdout_string("flag[");  // "flag["
        stdout_number(g_counter); // counter (mem[28])
        stdout_string("]: ");  // "]:"

        do{
            temp = input(); // input
        }while(temp < 1);

        g_input_flag[g_counter] = temp;

        stdout_char(temp);
        stdout_char("\n"); // "\n"
        
        g_counter++;
    }
    return;
}

void swirl(){
    int iter = 0;
    while(iter < g_input_flag){
        temp = g_input_flag[iter];
        g_input_flag[iter] = g_input_flag[swirl[iter]];
        g_input_flag[swirl[iter]] = temp;
        iter++;
    }
    return;
}

void add_or_smth(){
    int iter = 0;
    while(iter < flag_len){ // flag_len
        g_input_flag[iter] = mapper[(iter + swirl_counter + 11) % flag_len]
    }
}